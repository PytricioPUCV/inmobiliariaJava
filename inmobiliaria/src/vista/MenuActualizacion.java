/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import modelo.*;

import javax.swing.*;
import java.awt.*;
import java.util.List;

/**
 *
 * @author gioahumada
 */
public class MenuActualizacion extends javax.swing.JFrame {
    private Inmobiliaria inmobiliaria;

    /**
     * Creates new form MenuAdministrador
     */
    public MenuActualizacion(Inmobiliaria inmobiliaria) {
        this.inmobiliaria = inmobiliaria;
        initComponents();
        setLocationRelativeTo(null); // Centrar la ventana
        setResizable(false); // Deshabilitar el cambio de tamaño
        setTitle("Inmobiliaria Java - Actualizar Datos");
        Image icon = new ImageIcon(getClass().getResource("/img/favicon.png")).getImage();
        setIconImage(icon);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        actualizarComuna = new javax.swing.JButton();
        actualizarCasa = new javax.swing.JButton();
        actualizarDepartamento = new javax.swing.JButton();
        actualizarTerreno = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(0, 0, 51));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/user.png"))); // NOI18N
        jLabel1.setText("jLabel1");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/faviconwhite.png"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 361, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addGap(19, 19, 19))
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3))
                                .addContainerGap(16, Short.MAX_VALUE))
        );

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel4.setText("Menú Actualizar Datos");

        actualizarComuna.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/updateComuna.png"))); // NOI18N
        actualizarComuna.setBorder(null);
        actualizarComuna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarComunaActionPerformed(evt);
            }
        });

        actualizarCasa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/updateCasa.png"))); // NOI18N
        actualizarCasa.setBorder(null);
        actualizarCasa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarCasaActionPerformed(evt);
            }
        });

        actualizarDepartamento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/updateDepto.png"))); // NOI18N
        actualizarDepartamento.setBorder(null);
        actualizarDepartamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarDepartamentoActionPerformed(evt);
            }
        });

        actualizarTerreno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/updateTerreno.png"))); // NOI18N
        actualizarTerreno.setBorder(null);
        actualizarTerreno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarTerrenoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addGap(6, 6, 6)
                                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                                .addComponent(actualizarDepartamento, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addGap(18, 18, 18)
                                                                                .addComponent(actualizarTerreno, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                                .addComponent(actualizarComuna, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addGap(18, 18, 18)
                                                                                .addComponent(actualizarCasa, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(actualizarComuna, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(actualizarCasa, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(actualizarDepartamento, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(actualizarTerreno, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 201, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>

    private void actualizarComunaActionPerformed(java.awt.event.ActionEvent evt) {
        // Obtener todas las comunas
        List<Comuna> comunas = inmobiliaria.obtenerTodasLasComunas();

        if (comunas.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay comunas disponibles", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Crear un array de nombres de comunas
        String[] nombresComunas = comunas.stream().map(Comuna::getNombre).toArray(String[]::new);

        // Mostrar un JComboBox con los nombres de las comunas
        String nombreComunaSeleccionada = (String) JOptionPane.showInputDialog(this, "Seleccione una Comuna:",
                "Actualizar Comuna", JOptionPane.QUESTION_MESSAGE, null, nombresComunas, nombresComunas[0]);

        if (nombreComunaSeleccionada != null) {
            // Buscar la comuna seleccionada por nombre
            Comuna comunaSeleccionada = comunas.stream()
                    .filter(comuna -> comuna.getNombre().equals(nombreComunaSeleccionada))
                    .findFirst()
                    .orElse(null);

            if (comunaSeleccionada != null) {
                // Solicitar nuevos datos de la Comuna
                String nuevoNombre = JOptionPane.showInputDialog(this, "Ingrese nuevo Nombre de la Comuna:", comunaSeleccionada.getNombre());
                String nuevaClase = JOptionPane.showInputDialog(this, "Ingrese nueva Clase de la Comuna:", comunaSeleccionada.getClase());

                if (nuevoNombre != null && !nuevoNombre.trim().isEmpty() && nuevaClase != null && !nuevaClase.trim().isEmpty()) {
                    comunaSeleccionada.setNombre(nuevoNombre.trim());
                    comunaSeleccionada.setClase(nuevaClase.trim());
                    JOptionPane.showMessageDialog(this, "Comuna actualizada correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Nombre o Clase no pueden estar vacíos", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Comuna no encontrada", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void actualizarCasaActionPerformed(java.awt.event.ActionEvent evt) {
        // Solicitar ID de la Comuna
        String idComunaStr = JOptionPane.showInputDialog(this, "Ingrese ID de la Comuna:");
        if (idComunaStr != null && !idComunaStr.trim().isEmpty()) {
            try {
                int idComuna = Integer.parseInt(idComunaStr.trim());
                Comuna comuna = inmobiliaria.buscarComunaPorId(idComuna);

                if (comuna != null) {
                    // Solicitar ID de la Casa
                    String idCasaStr = JOptionPane.showInputDialog(this, "Ingrese ID de la Casa:");
                    if (idCasaStr != null && !idCasaStr.trim().isEmpty()) {
                        try {
                            int idCasa = Integer.parseInt(idCasaStr.trim());
                            Casa casa = comuna.obtenerCasa(idCasa);

                            if (casa != null) {
                                // Solicitar nuevos datos de la Casa
                                String nuevaDireccion = JOptionPane.showInputDialog(this, "Ingrese nueva Dirección de la Casa:", casa.getDireccion());
                                String nuevosMts2Str = JOptionPane.showInputDialog(this, "Ingrese nuevos Metros Cuadrados de la Casa:", casa.getMts2());
                                String nuevoNumHabitacionesStr = JOptionPane.showInputDialog(this, "Ingrese nuevo Número de Habitaciones de la Casa:", casa.getNumHabitaciones());
                                String nuevoNumBaniosStr = JOptionPane.showInputDialog(this, "Ingrese nuevo Número de Baños de la Casa:", casa.getNumBanios());
                                String nuevoNumEstacionamientoStr = JOptionPane.showInputDialog(this, "Ingrese nuevo Número de Estacionamientos de la Casa:", casa.getNumEstacionamiento());
                                String nuevosMts2ConstruidosStr = JOptionPane.showInputDialog(this, "Ingrese nuevos Metros Cuadrados Construidos de la Casa:", casa.getMts2Construidos());
                                String tienePatioStr = JOptionPane.showInputDialog(this, "¿Tiene Patio? (true/false):", casa.isTienePatio());

                                if (nuevaDireccion != null && !nuevaDireccion.trim().isEmpty() &&
                                        nuevosMts2Str != null && !nuevosMts2Str.trim().isEmpty() &&
                                        nuevoNumHabitacionesStr != null && !nuevoNumHabitacionesStr.trim().isEmpty() &&
                                        nuevoNumBaniosStr != null && !nuevoNumBaniosStr.trim().isEmpty() &&
                                        nuevoNumEstacionamientoStr != null && !nuevoNumEstacionamientoStr.trim().isEmpty() &&
                                        nuevosMts2ConstruidosStr != null && !nuevosMts2ConstruidosStr.trim().isEmpty() &&
                                        tienePatioStr != null && !tienePatioStr.trim().isEmpty()) {

                                    casa.setDireccion(nuevaDireccion.trim());
                                    casa.setMts2(Double.parseDouble(nuevosMts2Str.trim()));
                                    casa.setNumHabitaciones(Integer.parseInt(nuevoNumHabitacionesStr.trim()));
                                    casa.setNumBanios(Integer.parseInt(nuevoNumBaniosStr.trim()));
                                    casa.setNumEstacionamiento(Integer.parseInt(nuevoNumEstacionamientoStr.trim()));
                                    casa.setMts2Construidos(Integer.parseInt(nuevosMts2ConstruidosStr.trim()));
                                    casa.setTienePatio(Boolean.parseBoolean(tienePatioStr.trim()));

                                    JOptionPane.showMessageDialog(this, "Casa actualizada correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                                } else {
                                    JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios", "Error", JOptionPane.ERROR_MESSAGE);
                                }
                            } else {
                                JOptionPane.showMessageDialog(this, "Casa no encontrada", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(this, "ID de Casa inválido", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "ID de la Casa no puede estar vacío", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Comuna no encontrada", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "ID de Comuna inválido", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "ID de la Comuna no puede estar vacío", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void actualizarDepartamentoActionPerformed(java.awt.event.ActionEvent evt) {
        // Solicitar ID de la Comuna
        String idComunaStr = JOptionPane.showInputDialog(this, "Ingrese ID de la Comuna:");
        if (idComunaStr != null && !idComunaStr.trim().isEmpty()) {
            try {
                int idComuna = Integer.parseInt(idComunaStr.trim());
                Comuna comuna = inmobiliaria.buscarComunaPorId(idComuna);

                if (comuna != null) {
                    // Solicitar ID del Departamento
                    String idDepartamentoStr = JOptionPane.showInputDialog(this, "Ingrese ID del Departamento:");
                    if (idDepartamentoStr != null && !idDepartamentoStr.trim().isEmpty()) {
                        try {
                            int idDepartamento = Integer.parseInt(idDepartamentoStr.trim());
                            Departamento departamento = comuna.obtenerDepartamento(idDepartamento);

                            if (departamento != null) {
                                // Solicitar nuevos datos del Departamento
                                String nuevaDireccion = JOptionPane.showInputDialog(this, "Ingrese nueva Dirección del Departamento:", departamento.getDireccion());
                                String nuevosMts2Str = JOptionPane.showInputDialog(this, "Ingrese nuevos Metros Cuadrados del Departamento:", departamento.getMts2());
                                String nuevoNumHabitacionesStr = JOptionPane.showInputDialog(this, "Ingrese nuevo Número de Habitaciones del Departamento:", departamento.getNumHabitaciones());
                                String nuevoNumBaniosStr = JOptionPane.showInputDialog(this, "Ingrese nuevo Número de Baños del Departamento:", departamento.getNumBanos());
                                String nuevoPisoStr = JOptionPane.showInputDialog(this, "Ingrese nuevo Piso del Departamento:", departamento.getPiso());
                                String tieneEstacionamientoStr = JOptionPane.showInputDialog(this, "¿Tiene Estacionamiento? (true/false):", departamento.isTieneEstacionamiento());
                                String tieneBodegaStr = JOptionPane.showInputDialog(this, "¿Tiene Bodega? (true/false):", departamento.isTieneBodega());

                                if (nuevaDireccion != null && !nuevaDireccion.trim().isEmpty() &&
                                        nuevosMts2Str != null && !nuevosMts2Str.trim().isEmpty() &&
                                        nuevoNumHabitacionesStr != null && !nuevoNumHabitacionesStr.trim().isEmpty() &&
                                        nuevoNumBaniosStr != null && !nuevoNumBaniosStr.trim().isEmpty() &&
                                        nuevoPisoStr != null && !nuevoPisoStr.trim().isEmpty() &&
                                        tieneEstacionamientoStr != null && !tieneEstacionamientoStr.trim().isEmpty() &&
                                        tieneBodegaStr != null && !tieneBodegaStr.trim().isEmpty()) {

                                    departamento.setDireccion(nuevaDireccion.trim());
                                    departamento.setMts2(Double.parseDouble(nuevosMts2Str.trim()));
                                    departamento.setNumHabitaciones(Integer.parseInt(nuevoNumHabitacionesStr.trim()));
                                    departamento.setNumBanos(Integer.parseInt(nuevoNumBaniosStr.trim()));
                                    departamento.setPiso(Integer.parseInt(nuevoPisoStr.trim()));
                                    departamento.setTieneEstacionamiento(Boolean.parseBoolean(tieneEstacionamientoStr.trim()));
                                    departamento.setTieneBodega(Boolean.parseBoolean(tieneBodegaStr.trim()));

                                    JOptionPane.showMessageDialog(this, "Departamento actualizado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                                } else {
                                    JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios", "Error", JOptionPane.ERROR_MESSAGE);
                                }
                            } else {
                                JOptionPane.showMessageDialog(this, "Departamento no encontrado", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(this, "ID de Departamento inválido", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "ID del Departamento no puede estar vacío", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Comuna no encontrada", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "ID de Comuna inválido", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "ID de la Comuna no puede estar vacío", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void actualizarTerrenoActionPerformed(java.awt.event.ActionEvent evt) {
        // Solicitar ID de la Comuna
        String idComunaStr = JOptionPane.showInputDialog(this, "Ingrese ID de la Comuna:");
        if (idComunaStr != null && !idComunaStr.trim().isEmpty()) {
            try {
                int idComuna = Integer.parseInt(idComunaStr.trim());
                Comuna comuna = inmobiliaria.buscarComunaPorId(idComuna);

                if (comuna != null) {
                    // Solicitar ID del Terreno
                    String idTerrenoStr = JOptionPane.showInputDialog(this, "Ingrese ID del Terreno:");
                    if (idTerrenoStr != null && !idTerrenoStr.trim().isEmpty()) {
                        try {
                            int idTerreno = Integer.parseInt(idTerrenoStr.trim());
                            Terreno terreno = comuna.obtenerTerreno(idTerreno);

                            if (terreno != null) {
                                // Solicitar nuevos datos del Terreno
                                String nuevaDireccion = JOptionPane.showInputDialog(this, "Ingrese nueva Dirección del Terreno:", terreno.getDireccion());
                                String nuevosMts2Str = JOptionPane.showInputDialog(this, "Ingrese nuevos Metros Cuadrados del Terreno:", terreno.getMts2());
                                String tieneAguaStr = JOptionPane.showInputDialog(this, "¿Tiene Agua? (true/false):", terreno.isTieneServicioAgua());
                                String tieneLuzStr = JOptionPane.showInputDialog(this, "¿Tiene Luz? (true/false):", terreno.isTieneServicioLuz());
                                String tieneGasStr = JOptionPane.showInputDialog(this, "¿Tiene Gas? (true/false):", terreno.isTieneServicioGas());

                                if (nuevaDireccion != null && !nuevaDireccion.trim().isEmpty() &&
                                        nuevosMts2Str != null && !nuevosMts2Str.trim().isEmpty() &&
                                        tieneAguaStr != null && !tieneAguaStr.trim().isEmpty() &&
                                        tieneLuzStr != null && !tieneLuzStr.trim().isEmpty() &&
                                        tieneGasStr != null && !tieneGasStr.trim().isEmpty()) {

                                    terreno.setDireccion(nuevaDireccion.trim());
                                    terreno.setMts2(Double.parseDouble(nuevosMts2Str.trim()));
                                    terreno.setTieneServicioAgua(Boolean.parseBoolean(tieneAguaStr.trim()));
                                    terreno.setTieneServicioLuz(Boolean.parseBoolean(tieneLuzStr.trim()));
                                    terreno.setTieneServicioGas(Boolean.parseBoolean(tieneGasStr.trim()));

                                    JOptionPane.showMessageDialog(this, "Terreno actualizado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                                } else {
                                    JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios", "Error", JOptionPane.ERROR_MESSAGE);
                                }
                            } else {
                                JOptionPane.showMessageDialog(this, "Terreno no encontrado", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(this, "ID de Terreno inválido", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "ID del Terreno no puede estar vacío", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Comuna no encontrada", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "ID de Comuna inválido", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "ID de la Comuna no puede estar vacío", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuActualizacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuActualizacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuActualizacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuActualizacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Inmobiliaria inmobiliaria = new Inmobiliaria();
                new MenuActualizacion(inmobiliaria).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton actualizarCasa;
    private javax.swing.JButton actualizarComuna;
    private javax.swing.JButton actualizarDepartamento;
    private javax.swing.JButton actualizarTerreno;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration
}
